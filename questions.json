[
  {
    "stem": "You have a performance problem with your application, what do you do first?",
    "answer": "Run a profiler to gather data about exactly where the problem is located. (Don't guess!)",
    "subject": "debugging"
  },
  {
    "stem": "When you are first becoming acquainted with a new code base, what things do you notice, or look for, which give you an indication of the quality of the code?",
    "subject": "code quality"
  },
  {
    "stem": "What things tell you that the code is probably well organized and what things tell you it probably isn’t?",
    "subject": "code quality"
  },
  {
    "stem": "Explain the details and usage of a design pattern that you have used, other than singleton.",
    "subject": "design patterns"
  },
  {
    "stem": "What is the difference between a class and an instance?",
    "answer": "A class is a template for a new object; an instance is an object which was created from that template.",
    "subject": "java"
  },
  {
    "stem": "What are the access/visibility modifiers in Java?",
    "answer": "public, protected, private, and package (default)",
    "subject": "java"
  },
  {
    "stem": "What is the difference between abstract classes and interfaces?",
    "answer": "Abstract classes can contain code/implementation.\nInterfaces are simply a declarative structure",
    "subject": "java"
  },
  {
    "stem": "Does the Java language allow multiple inheritance?",
    "answer": "Yes. It allows multiple interface inheritance. It does disallow multiple implementation inheritance though.",
    "subject": "java"
  },
  {
    "stem": "When do static members of an object get initialized?",
    "answer": "The first time the object is instantiated or invoked, NOT at application startup).",
    "subject": "java"
  },
  {
    "stem": "Explain the final keyword for a field",
    "answer": "Field = value of field cannot be changed outside the constructor.",
    "subject": "java"
  },
  {
    "stem": "Explain the final keyword for a method, and a class",
    "answer": "The method cannot be overridden in subclasses.",
    "subject": "java"
  },
  {
    "stem": "Explain the final keyword for a class",
    "answer": "The class cannot be sub-classed (extended).",
    "subject": "java"
  },
  {
    "stem": "What is the difference between the .equals method and the 'equals equals' operator?",
    "answer": "'equals equals' performs a comparison of the object reference, .equals performs a class specific comparison",
    "subject": "java"
  },
  {
    "stem": "If two objects are equal (using the equals method), will they have the same hash code? Why?",
    "answer": "Yes, the contract for equals states the hash code must be equal for objects that are equal.",
    "subject": "java"
  },
  {
    "stem": "Explain checked exceptions vs. unchecked exceptions",
    "answer": "Checked exceptions must be caught or declared as thrown, unchecked do not need to be caught",
    "subject": "java"
  },
  {
    "stem": "Why would you declare a private constructor?",
    "answer": "So the object cannot be externally instantiated.",
    "subject": "java"
  },
  {
    "stem": "What is the difference between an anonymous class and an inner class?",
    "answer": "Anonymous classes are declared within a method body and cannot be reused.\nInner classes are declared within a class body and can be reused",
    "subject": "java"
  },
  {
    "stem": "What is the difference between an inner class and a static inner class?",
    "answer": "Inner class has a reference to its enclosing class and cannot be instantiated independent of its enclosing class.\nStatic inner class does not have a reference to its enclosing instance and can be instantiated directly.",
    "subject": "java"
  },
  {
    "stem": "What is synchronization and when do you use it?",
    "answer": "Synchronization controls access of multiple threads to shared resources. Without synchronization, it is possible for one thread to modify a shared object while another thread is in the process of using or updating that object's value",
    "subject": "java"
  },
  {
    "stem": "Explain the difference between a synchronized block and a synchronized method.",
    "answer": "Method obtains a lock on the instance of the containing object.\nBlock obtains a lock on the object specified in the block.",
    "subject": "java"
  },
  {
    "stem": "What is reflection and when do you use it?",
    "answer": "Reflection is when an application has the ability to examine and modify its own structure and behavior at runtime.\nAllows the runtime variation of the concrete implementation, method called, or variable modified to vary at runtime.",
    "subject": "java"
  },
  {
    "stem": "Why would you declare a serial version UID field?",
    "answer": "SUID is used to inform the Java serialization mechanism which version of the class is compatible with this serialized object.",
    "subject": "java"
  },
  {
    "stem": "When is type checking performed on generic classes?",
    "answer": "Compile time",
    "subject": "java"
  },
  {
    "stem": "What does REST mean?",
    "answer": "Representational state transfer",
    "subject": "express"
  },
  {
    "stem": "What is a template engine?",
    "answer": "Combines one or more templates with a data model",
    "subject": "express"
  },
  {
    "stem": "What XP Value does using the express-generator espouse?",
    "answer": "Simplicity",
    "subject": "express"
  },
  {
    "stem": "What is an Express Route in relation to MVC?",
    "answer": "The controller",
    "subject": "express"
  },
  {
    "stem": "How are EDD and TDD similar?",
    "answer": "Both require an error to drive what to do next.",
    "subject": "express"
  },
  {
    "stem": "When would you use EDD instead of TDD?",
    "answer": "Never for production, but most commonly for learning new frameworks / API's that you don't yet know how to test.",
    "subject": "express"
  },
  {
    "stem": "What is the most significant advantage of TDD over EDD?",
    "answer": "No extra cost or effort to re-validate the behavior of the system. Able to re-execute the tests with no manual effort.",
    "subject": "express"
  },
  {
    "stem": "what is req.body ? How did it get there?",
    "answer": "A JavaScript Object representation of the submitted form.  Added to the reqest by the bodyparser. ",
    "subject": "express"
  },
  {
    "stem": "what function arguments are available to Express.js route handlers?",
    "answer": "req - the request object, res - the response object, next (optional) - a function to pass control to one of the subsequent route handlers",
    "subject": "express"
  },
  {
    "stem": "what are core features of the Express.js framework?",
    "answer": "Use middleware to respond to HTTP Requests, Defines routing which maps to a URL and HTTP Method. Render HTML Pages using a templating engine.",
    "subject": "express"
  },
  {
    "stem": "How do you get query parameters in Express.js?",
    "answer": "req.query[paramater-name]",
    "subject": "express"
  },
  {
    "stem": "How do you get URL parameters in Express.js?",
    "answer": "req.params[paramater-name]",
    "subject": "express"
  },
  {
    "stem": "What is the parameter “next” used for in Express?",
    "answer": "a function to pass control to one of the subsequent route handlers",
    "subject": "express"
  },
  {
    "stem": "What is the default template engine used in Express?",
    "answer": "Jade or Pug",
    "subject": "express"
  },
  {
    "stem": "What is middleware? List some examples of middleware we have used.",
    "answer": "Any number of functions that are invoked by the Express.js routing layer before the final request handler, and thus sits in the middle between a raw request and the final intended route.",
    "subject": "express"
  },
  {
    "stem": "What is the purpose of the `next` parameter?",
    "answer": "Provides access to next middleware function in the application’s request-response cycle.",
    "subject": "express"
  },
  {
    "stem": "In what order are middleware functions called?",
    "answer": "In the order they are added",
    "subject": "express"
  },
  {
    "stem": "In what order are route functions called?",
    "answer": "In the order they are added",
    "subject": "express"
  },
  {
    "stem": "What is the difference between a unit test and an integration test?",
    "answer": "Unit tests validate a class or method in isolation. Integration tests include dependencies",
    "subject": "testing"
  },
  {
    "stem": "What are the components of an HTTP request (not a duplicate)?",
    "answer": "verb, version, url, header(s) (includes cookies), and body",
    "subject": "http"
  },
  {
    "stem": "What are the components of an HTTP response (not a duplicate)?",
    "answer": "status code & reason phrase, header(s) (includes cookies), and body",
    "subject": "http"
  },
  {
    "stem": "What is the difference between a mock and a stub?",
    "answer": "Mock cares if you call it. Stubs are sanguine (optimistic or positive - don't care about calls, order, or validation)",
    "subject": "mocking"
  },
  {
    "stem": "What are the four states of a file in git?",
    "answer": "Untracked, Unmodified, Modified, Staged, Committed",
    "subject": "git"
  },
  {
    "stem": "What is the difference between a local and remote repository?",
    "answer": "The local is a complete copy (perhaps missing some branches)",
    "subject": "git"
  },
  {
    "stem": "Can the remote origin repository be ahead of the local repository?",
    "answer": "Yes.",
    "subject": "git"
  },
  {
    "stem": "Which git commands interact with the remote server?",
    "answer": "fetch, pull, push. No other commands connect to the remote server. Unlike SVN, Perforce, etc, no server is required.",
    "subject": "git"
  },
  {
    "stem": "Can any directory be a git repository?",
    "answer": "Yes. git init works in any directory.",
    "subject": "git"
  },
  {
    "stem": "What is the function of ‘GIT PUSH’ in GIT?",
    "answer": "Pushes your changes to the remote repository. Technically it Updates remote refs along with associated objects",
    "subject": "git"
  },
  {
    "stem": "What does 'git remote -v' do?",
    "answer": "List the remote repositories associated with the repositories",
    "subject": "git"
  },
  {
    "stem": "Which git command(s) will work outside of a git repository?",
    "answer": "git init",
    "subject": "git"
  },
  {
    "stem": "How to you list the commit history of a repository?",
    "answer": "git log",
    "subject": "git"
  },
  {
    "stem": "What does commit object contain??",
    "answer": "1) A set of files, representing the state of the entire repository at a given point of time. 2) Reference to parent commit objects. 3) An SHA name, a 40 character string that uniquely identifies the commit object.",
    "subject": "git"
  },
  {
    "stem": "What is the function of git clone?",
    "answer": "The git clone command creates a copy of an existing Git repository.  To get the copy of a central repository, ‘cloning’  is the most common way used by programmers.",
    "subject": "git"
  },
  {
    "stem": "How can you create a repository in Git?",
    "answer": "'git init' is any directory.",
    "subject": "git"
  },
  {
    "stem": "What is the purpose of branching in GIT?",
    "answer": "Allows you to go to your previous work keeping your recent work intact.",
    "subject": "git"
  },
  {
    "stem": "How can you bring a new feature in the main branch?",
    "answer": "'git merge' or 'git pull'",
    "subject": "git"
  },
  {
    "stem": "What is a ‘merge conflict’ in git?",
    "answer": "The commit that has to be merged has some change in one place, and the current commit also has a change at the same place. Git will not be able to predict which change should take precedence.",
    "subject": "git"
  },
  {
    "stem": "How can 'merge conflict' be resolved?",
    "answer": "Edit the files manually to fix the conflicting changes and then add the resolved files using 'git add'. Then run 'git rebase --continue' or 'git commit'",
    "subject": "git"
  },
  {
    "stem": "What is the function of ‘git diff’?",
    "answer": "shows the changes between commits, commit and working tree, etc",
    "subject": "git"
  },
  {
    "stem": "What is ‘git status’ is used for?",
    "answer": "shows the difference between the working directory and the index (committed files)",
    "subject": "git"
  },
  {
    "stem": "What is ‘git add’ is used for?",
    "answer": "Changes the tracking state of the files from Modified or Untracked to Staged.",
    "subject": "git"
  },
  {
    "stem": "How many 'remotes' can a repository have?",
    "answer": "Unlimited",
    "subject": "git"
  },
  {
    "stem": "What does `git init` do?",
    "answer": "Initializes any directory to a new Git repository",
    "subject": "git"
  },
  {
    "stem": "What does `git status` do?",
    "answer": "Shows the states of the files in a git repository",
    "subject": "git"
  },
  {
    "stem": "How do you stage all untracked and modified files in a git repository?",
    "answer": "'git add .'",
    "subject": "git"
  },
  {
    "stem": "What does the .gitignore file do?",
    "answer": "Tells git which files should not be included in the repository",
    "subject": "git"
  },
  {
    "stem": "What does `git diff` do?",
    "answer": "Shows the changes to all modified files in the repository",
    "subject": "git"
  },
  {
    "stem": "Is 'Updated about page' a good commit message? Why or why not?",
    "answer": "No, it does not tell you WHY it changed. Was it a bug, a story, or something else?",
    "subject": "git"
  },
  {
    "stem": "What is the generic name for tools like Pug?",
    "answer": "Template engine",
    "subject": "pug"
  },
  {
    "stem": "What is the generic name for tools like Pug?",
    "answer": "Template engine",
    "subject": "pug"
  },
  {
    "stem": "What is the output format of Pug?",
    "answer": "HTML",
    "subject": "pug"
  },
  {
    "stem": "What is the output format of Pug?",
    "answer": "HTML",
    "subject": "pug"
  },
  {
    "stem": "What is the difference between acceptance testing and unit testing",
    "subject": "protractor"
  },
  {
    "stem": "What is the difference between acceptance testing and integration testing",
    "subject": "protractor"
  },
  {
    "stem": "What is the difference between acceptance testing and UI testing",
    "subject": "protractor"
  },
  {
    "stem": "What is the difference between mocha and jasmine",
    "subject": "protractor"
  },
  {
    "stem": "What underlying tool does protractor use to drive the browswer",
    "subject": "protractor"
  },
  {
    "stem": "Does protractor interact directly with the server? - no only the browser",
    "subject": "protractor"
  },
  {
    "stem": "what is User acceptance testing",
    "subject": "protractor"
  },
  {
    "stem": "What are the objectives of a User Acceptance Test.",
    "subject": "protractor"
  },
  {
    "stem": "You are starting a new feature, which type of test do you write first? Unit, Integration, or Acceptance? And why?",
    "subject": "protractor",
    "answer": "follows outside in, you know your done with the feature the moment the acceptance test passes"
  },
  {
    "stem": "What are the by.* functions in protractor?",
    "answer": "Matcher",
    "subject": "protractor"
  },
  {
    "stem": "Are protractor by.* methods asynchronous?",
    "subject": "protractor",
    "answer": "Yes"
  },
  {
    "stem": "Do we need QA if we have 100% acceptance test coverage?",
    "subject": "protractor",
    "answer": "Yes. People are excellent at destructive testing, computers are not. 'here is a hammer, try to break it'"
  },
  {
    "stem": "Should acceptance tests verify the number of records in the database?",
    "subject": "protractor",
    "answer": "Only indirectly through observing content on the page."
  },
  {
    "stem": "Should acceptance tests verify the state of the javascript data objects the page?",
    "subject": "protractor",
    "answer": "Only indirectly through observing content on the page."
  },
  {
    "stem": "When should use you by.xpath(...)?",
    "subject": "protractor",
    "answer": "This should be avoided because it makes the tests brittle. Use only when another method will not work."
  },
  {
    "stem": "You are using a jquery plugin on the page, should the acceptance tests execute all of the behavior of the plugin? - No! You are testing your code, not someone elses!",
    "subject": "protractor",
    "answer": "No, the developer of the plugin should have tested it. Only test code 'you' write."
  },
  {
    "stem": "Do you include negative path tests in acceptance tests?",
    "answer": "it depends. Is it important to the end user?",
    "subject": "protractor"
  },
  {
    "stem": "Is there a potential pitfall with using typeof bar === 'object' to determine if bar is an object? If so, how can this pitfall be avoided?",
    "answer": "typeof null === 'object' evaluates to true, so does typeof [].  Avoid this by checking for bar being null or an array.",
    "subject": "JavaScript intro"
  },
  {
    "stem": "What are the benefits of including 'use strict' at the beginning of the file?",
    "answer": "Prevents accidental globals; Disallows duplicate property names or parameter values; More benefits covered later in the course",
    "subject": "JavaScript intro"
  },
  {
    "stem": "What is NaN?",
    "answer": "It represents a value that is 'not a number'",
    "subject": "JavaScript intro"
  },
  {
    "stem": "What is the typeof NaN?",
    "answer": "typeof NaN === 'number' evaluates to true",
    "subject": "JavaScript intro"
  },
  {
    "stem": "What is the output of 'console.log({} === {})?",
    "answer": "false - objects cannot be compared using === or ==",
    "subject": "JavaScript intro"
  },
  {
    "stem": "Is NaN === NaN?",
    "answer": "NaN === NaN evaluates to false",
    "subject": "JavaScript intro"
  },
  {
    "stem": "What is the difference between == and ===?",
    "answer": "== is abstract equality, which will attempt to resolve the data types via type coercion before making a comparison. === is strict equality, which will will return false if the types are different",
    "subject": "JavaScript intro"
  },
  {
    "stem": "What is the difference Boolean and boolean?",
    "answer": "Booleean's are instances. boolean is a literal.",
    "subject": "JavaScript intro"
  },
  {
    "stem": "How does the value of 'Simplicity' helps us build better software?",
    "answer": "Maximize the value created for the investment",
    "subject": "xp"
  },
  {
    "stem": "How does the value of 'Communication' helps us build better software?",
    "answer": "We communicate to create the best solution to our problem that we can together.",
    "subject": "xp"
  },
  {
    "stem": "How does the value of 'Feedback' helps us build better software?",
    "answer": "Lots of feedback allows for frequent and small course corrections.",
    "subject": "xp"
  },
  {
    "stem": "What are some common types of 'Feedback' we have in XP?",
    "answer": "Pair programming, TDD, iteration, retrospectives, demo's, releases.",
    "subject": "xp"
  },
  {
    "stem": "How does the value of 'Respect' helps us build better software?",
    "answer": "Everyone contributes value even if it's simply enthusiasm. Developers respect the expertise of the customers and vice versa. Management respects our right to accept responsibility and receive authority over our own work.",
    "subject": "xp"
  },
  {
    "stem": "How does the value of 'Courage' helps us build better software?",
    "answer": "We will tell the truth about progress and estimates. We don't document excuses for failure because we plan to succeed. We don't fear anything because no one ever works alone. We will adapt to changes when ever they happen.",
    "subject": "xp"
  },
  {
    "stem": "What is a higher order function?",
    "answer": "A function that accepts a function as a parameter, returns a function, or both.",
    "subject": "higher order functions"
  },
  {
    "stem": "What is the contract of the filter function callback?",
    "answer": "If the callback returns true, the element will be included in the returned array, otherwise it will excluded.",
    "subject": "higher order functions"
  },
  {
    "stem": "When using the filter function, can the resulting array contain FEWER elements than the original array?",
    "answer": "Yes, the array can be the same size or have some elements removed resulting in a smaller array.",
    "subject": "higher order functions"
  },
  {
    "stem": "When using the filter function, can the resulting array contain MORE elements than the original array?",
    "answer": "No, the array will be of equal size or smaller.",
    "subject": "higher order functions"
  },
  {
    "stem": "When using the map function, can the resulting array contain MORE elements than the original array?",
    "answer": "No, the array will be of equal size",
    "subject": "higher order functions"
  },
  {
    "stem": "When using the map function, can the resulting array contain FEWER elements than the original array?",
    "answer": "No, the array will be of equal size",
    "subject": "higher order functions"
  },
  {
    "stem": "What is the return type of the reduce function?",
    "answer": "Any data type - array, object, number, string, etc.",
    "subject": "higher order functions"
  },
  {
    "stem": "When using the reduce function, can you return an array with FEWER elements than the original array?",
    "answer": "Yes. The result can be any size array or any data type.",
    "subject": "higher order functions"
  },
  {
    "stem": "When using the reduce function, can you return an array with MORE elements than the original array?",
    "answer": "Yes. The result can be any size array or any data type.",
    "subject": "higher order functions"
  },

  {
    "stem": "If a function takes another function?",
    "answer": "Yes. The result can be any size array or any data type.",
    "subject": "higher order functions"
  },

  {
    "stem": "What is an  advantage of a higher order function?",
    "answer": "Change behavior of callee by passing in a function. ",
    "subject": "higher order functions"
  },
  {
    "stem": "What do you call a function that has at least one bound variable?",
    "answer": "Closure",
    "subject": "higher order functions"
  },
  {
    "stem": "What is a closure?",
    "answer": "A function containing at least one bound variable",
    "subject": "higher order functions"
  },
  {
    "stem": "What is a free variable?",
    "answer": "A free variable is any variable that is neither local to the function, nor a parameter of the function.",
    "subject": "higher order functions"
  },

  {
    "stem": "What is a bound variable?",
    "answer": "A variable is bound when the value of the variable has been substituted by a specific value. i.e. in a closure instance",
    "subject": "higher order functions"
  },
  {
    "stem": "What are the parts of a function?",
    "answer": "name (optional in some cases), parameters, body",
    "subject": "higher order functions"
  },

  {
    "stem": "What is the output of this code?<code><p>var myOutput = fs.readFile(&#39;someFile.txt&#39;)</p><p>console.log(myOutput)</p></code>",
    "answer": "undefined",
    "subject": "Into to async JavaScript"
  },
  {
    "stem": "What is the output of this code?<code><p>&nbsp; var myOutput = &#39;&#39;;</p><p>&nbsp; var readFileResult = fs.readFile(&#39;someFile.txt&#39;, (err, data) => {<br />&nbsp; &nbsp; myOutput += data.toString()<br />&nbsp; });</p><p>&nbsp; console.log(readFileResult);<br />&nbsp; console.log(myOutput);</p></code>",
    "answer": "undefined<br>undefined",
    "subject": "Into to async JavaScript"
  },
  {
    "stem": "What is the output of this code?<code><p>var myOutput = &#39;&#39;;</p><p>var contents = fs.readFile(&#39;someFile.txt&#39;, (err, data) =&gt; {<br />&nbsp; console.log(data.toString());<br />});</p><p>console.log(contents);</p></code>",
    "answer": "undefined<br><code>contents of the file</code>",
    "subject": "Into to async JavaScript"
  },  {
    "stem": "What is the output of this code?<code><p>const myOutput = [10, 11, 13].map(console.log)</p><p>console.log(myOutput)</p></code>",
    "answer": "<p>10 0 [ 10, 11, 13 ]<br />11 1 [ 10, 11, 13 ]<br />13 2 [ 10, 11, 13 ]<br />[ undefined, undefined, undefined ]</p>",
    "subject": "Into to async JavaScript"
  },

  {
    "stem": "Is asynchronous code <strong>faster</strong> than synchronous code?",
    "answer": "No, it still takes the same amount of time, but the program is more responsive so it appears to faster",
    "subject": "Into to async JavaScript"
  },
  {
    "stem": "What does TDD stand for?",
    "answer": "Test-Driven Development",
    "subject": "tdd"
  },
  {
    "stem": "What is TDD about?",
    "answer": "Creating a reason for writing production code.",
    "subject": "tdd"
  },
  {
    "stem": "Describe the basic flow of TDD",
    "answer": "Red, Green, Refactor (Write failing test, Run test(s), Write minimal code to make test pass, Run test(s), Clean up code without breaking tests, Run test(s))",
    "subject": "tdd"
  },
  {
    "stem": "What tests a Unit Test?",
    "answer": "The smallest unit of software.",
    "subject": "tdd"
  },
  {
    "stem": "Name at least 2 requirements for a good Unit Test",
    "answer": "Test only 1 aspect of a function/method, Tests unit in isolation of dependencies, Tests only 1 path through function/method, Is automated",
    "subject": "tdd"
  },
  {
    "stem": "List at least 3 benefits of TDD",
    "answer": "Validation (of production code), Increases Productivity, Acts as Safety Net (for refactoring), Increases Quality, Improves Modularity, Produces Documentation",
    "subject": "tdd"
  },
  {
    "stem": "What is the 1st rule of TDD",
    "answer": "You are not allowed to write any production code unless it is to make a failing test pass.",
    "subject": "tdd"
  },
  {
    "stem": "Name at least 2 contexts of 'this' in JavaScript.",
    "answer": "Global, Object Method, Constructor, apply & call",
    "subject": "js-contexts"
  },
  {
    "stem": "What is `this` when invoking a global function in node.js?",
    "answer": "The `global` object.",
    "subject": "js-contexts"
  },
  {
    "stem": "What is `this` when invoking a global JavaScript function in a browser?",
    "answer": "The `window` object.",
    "subject": "js-contexts"
  },
  {
    "stem": "What is `this` when invoking a global JavaScript function in strict mode?",
    "answer": "Undefined.",
    "subject": "js-contexts"
  },
  {
    "stem": "What is `this` when used within an JavaScript object method?",
    "answer": "The object, having the method.",
    "subject": "js-contexts"
  },
  {
    "stem": "What is `this` when used within a JavaScript constructor function?",
    "answer": "The object, being created.",
    "subject": "js-contexts"
  },
  {
    "stem": "What is `this` when used within a JavaScript function, added to the prototype of a constructor function?",
    "answer": "The object, constructed with the construtor function.",
    "subject": "js-contexts"
  },
  {
    "stem": "What is `this` when used within a JavaScript function that gets invoked with Function.prototype.call or .apply?",
    "answer": "That depends on what is passed as first argument to Function.prototype.call or .apply.",
    "subject": "js-contexts"
  },
  {
    "stem": "Where is the end of the Prototype Chain pointing to?",
    "answer": "Nowhere (null).",
    "subject": "js-prototype"
  },
  {
    "stem": "What is the last element of the Prototype Chain?",
    "answer": "The Object prototype.",
    "subject": "js-prototype"
  },
  {
    "stem": "How does the JavaScript runtime evaluate if an object has a certain property or not?",
    "answer": "It traverses the Prototype Chain.",
    "subject": "js-prototype"
  },
  {
    "stem": "Is it possible to add behavior to JavaScript object instances after they have been created?",
    "answer": "Yes. By adding a function to one of the objects in the Prototype Chain.",
    "subject": "js-prototype"
  },
  {
    "stem": "Is it possible to add value properties to JavaScript object instances after they have been created?",
    "answer": "Only static properties, that are shared between all instances.",
    "subject": "js-prototype"
  },
  {
    "stem": "What is the type of Object?",
    "answer": "A (constructor) function.",
    "subject": "js-prototype"
  },
  {
    "stem": "What is the type of Object.prototype?",
    "answer": "object",
    "subject": "js-prototype"
  },
  {
    "stem": "What is so special about class definitions in ES6?",
    "answer": "They keywords are just syntactical sugar.",
    "subject": "js-classes"
  },
  {
    "stem": "List at least two steps, required for Prototypal Inheritance in JavaScript.",
    "answer": "Invoke constructor function of super type with apply or call. Set prototype of sub type to new object that is linked to prototype of super type. Reset prototype constructor to sub type constructor.",
    "subject": "js-classes"
  },
  {
    "stem": "Which keyword can be used in ES6 to inherite from a certain super type?",
    "answer": "extends",
    "subject": "js-classes"
  },
  {
    "stem": "Does ES6 use classic inheritance?",
    "answer": "No. It's still based on Prototypal Inheritance. The new keywords are just 'syntactical sugar'",
    "subject": "js-classes"
  },
  {
    "stem": "Why do we need Integration Testing?",
    "answer": "To ensure that units or components work together.",
    "subject": "integration testing"
  },
  {
    "stem": "How do Integration Tests usualy relate to Unit Tests on the Testing Pyramid?",
    "answer": "There are fewer, they are slower and usually harder to implement and therefore more expensive.",
    "subject": "integration testing"
  }
]
